<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AnimeAI v15 - Historias de Anime por IA</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #111827; color: #F9FAFB; }
        .modal-backdrop { background-color: rgba(0, 0, 0, 0.75); }
        .card-gradient { background: linear-gradient(to top, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0) 100%); }
        .modal-content { background-color: #1F2937; max-height: 90vh; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1F2937; }
        ::-webkit-scrollbar-thumb { background: #4B5563; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #6B7280; }
        .btn-icon { background-color: rgba(255,255,255,0.1); border-radius: 9999px; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; transition: background-color 0.2s; }
        .btn-icon:hover { background-color: rgba(255,255,255,0.2); }
        .btn-icon.active { background-color: #4f46e5; color: white; }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.9; }
            50% { transform: scale(1.05); opacity: 1; }
        }
        #splash-logo {
            animation: pulse 2.5s ease-in-out infinite;
        }
    </style>
</head>
<body class="antialiased">

    <!-- ===== Splash Screen ===== -->
    <div id="splash-screen" class="h-screen w-screen fixed top-0 left-0 bg-gray-900 flex flex-col items-center justify-center z-[100]">
        <svg id="splash-logo" class="w-24 h-24 text-indigo-500" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 4.5C7 4.5 2.73 7.61 1 12C2.73 16.39 7 19.5 12 19.5C17 19.5 21.27 16.39 23 12C21.27 7.61 17 4.5 12 4.5Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
             <path d="M12 9V10.5M12 15V13.5M9 12H10.5M15 12H13.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
        </svg>
        <h1 class="text-4xl font-bold text-white mt-4">AnimeAI</h1>
    </div>

    <!-- ===== Auth View ===== -->
    <div id="auth-view" class="hidden h-screen flex items-center justify-center p-4 bg-gray-900">
        <div class="max-w-md w-full bg-gray-800 p-8 rounded-2xl shadow-2xl">
            <h2 id="auth-title" class="text-3xl font-bold text-white text-center mb-6">Iniciar Sesión</h2>
            <form id="auth-form" class="space-y-4">
                 <div id="username-field" class="hidden"><input type="text" id="auth-username" placeholder="Nombre de usuario" class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"></div>
                <input type="email" id="auth-email" placeholder="Correo electrónico" required class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <input type="password" id="auth-password" placeholder="Contraseña" required class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <div id="confirm-password-field" class="hidden"><input type="password" id="auth-confirm-password" placeholder="Confirmar contraseña" class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"></div>
                <button type="submit" id="auth-submit-button" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-4 rounded-lg transition">Entrar</button>
            </form>
            <p id="auth-error" class="text-red-400 text-sm text-center mt-4 h-5"></p>
            <div class="text-center mt-4"><a href="#" id="auth-toggle-link" class="text-sm text-indigo-400 hover:text-indigo-300">¿No tienes cuenta? Regístrate</a></div>
        </div>
    </div>

    <!-- ===== Main App View ===== -->
    <div id="app-view" class="hidden">
        <header class="bg-gray-800/80 backdrop-blur-sm sticky top-0 z-40 shadow-lg">
            <nav class="container mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
                <h1 class="text-2xl font-bold text-white cursor-pointer" id="home-button">AnimeAI</h1>
                <div class="flex items-center space-x-2 sm:space-x-4">
                    <button id="admin-indicator" class="hidden text-yellow-400 font-semibold py-2 px-3 flex items-center cursor-default"><i class="fas fa-user-shield mr-2"></i><span class="hidden sm:inline">Admin</span></button>
                    <button id="my-list-button" class="text-gray-300 hover:text-white font-semibold py-2 px-3 rounded-lg transition flex items-center"><i class="fas fa-bookmark mr-2"></i><span class="hidden sm:inline">Mi Lista</span></button>
                    <button id="generate-new-anime-btn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-3 rounded-lg transition flex items-center"><i class="fas fa-magic mr-2"></i><span class="hidden sm:inline">Crear</span></button>
                    <button id="logout-button" class="text-gray-400 hover:text-white transition px-2"><i class="fas fa-sign-out-alt fa-lg"></i></button>
                </div>
            </nav>
            <div id="filters-container" class="container mx-auto px-4 sm:px-6 lg:px-8 pb-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="relative"><input id="search-input" type="text" placeholder="Buscar..." class="w-full bg-gray-700 text-white placeholder-gray-400 border border-gray-600 rounded-lg py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"><i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i></div>
                    <select id="category-filter" class="w-full bg-gray-700 text-white border border-gray-600 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"><option value="all">Todas las categorías</option></select>
                </div>
            </div>
        </header>
        <main class="container mx-auto p-4 sm:p-6 lg:p-8">
            <div id="loading-indicator" class="text-center py-10 hidden"><i class="fas fa-spinner fa-spin fa-3x text-indigo-500"></i><p class="mt-2 text-lg">Cargando...</p></div>
            <div id="main-content-view">
                <section id="all-animes-section">
                    <h2 id="view-title" class="text-2xl font-bold mb-4 text-white">Animes</h2>
                    <div id="anime-grid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6"></div>
                </section>
            </div>
            <div id="no-results" class="text-center py-10 hidden"><i class="fas fa-sad-tear fa-3x text-gray-500"></i><p class="mt-2 text-lg">No se encontraron animes.</p></div>
        </main>
    </div>
    
    <!-- Modals -->
    <div id="modal-container"></div>
    <div id="alert-modal-container"></div>
    
    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove, runTransaction, getDocs, deleteDoc, writeBatch } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = { apiKey: "AIzaSyD_MpO6ZLpl8yj0_d7SQ11XtIpCE_lzEnE", authDomain: "zx-film.firebaseapp.com", projectId: "zx-film", storageBucket: "zx-film.appspot.com", messagingSenderId: "246886908128", appId: "1:246886908128:web:484f2c8e4b60ef66555085" };
        const GEMINI_API_KEY = "AIzaSyBXLFHyGUmwtLZ4cMXm4NxXiD3bfag3b7I";
        const ADMIN_EMAIL = "derecktrix@hotmail.com";

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'anime-ai-v15-default';
        const animesCollection = collection(db, `/artifacts/${appId}/public/data/animes`);
        
        const ui = {
            splashScreen: document.getElementById('splash-screen'), authView: document.getElementById('auth-view'), appView: document.getElementById('app-view'),
            logoutButton: document.getElementById('logout-button'), animeGrid: document.getElementById('anime-grid'), loadingIndicator: document.getElementById('loading-indicator'),
            noResults: document.getElementById('no-results'), searchInput: document.getElementById('search-input'), categoryFilter: document.getElementById('category-filter'),
            homeButton: document.getElementById('home-button'), myListButton: document.getElementById('my-list-button'), viewTitle: document.getElementById('view-title'),
            modalContainer: document.getElementById('modal-container'), alertModalContainer: document.getElementById('alert-modal-container'),
            filtersContainer: document.getElementById('filters-container'), adminIndicator: document.getElementById('admin-indicator'),
            allAnimesSection: document.getElementById('all-animes-section'),
            generateNewAnimeBtn: document.getElementById('generate-new-anime-btn')
        };
        
        let state = { currentUser: null, allAnimes: [], userData: {}, isMyListView: false, authInitialized: false };
        let listeners = { animes: null, userData: null };

        // --- APP STARTUP & AUTH ---
        document.addEventListener('DOMContentLoaded', () => { initializeAuth(); setTimeout(() => { ui.splashScreen.style.transition = 'opacity 0.5s ease-out'; ui.splashScreen.style.opacity = '0'; setTimeout(() => { ui.splashScreen.classList.add('hidden'); if (state.authInitialized) { showCorrectInitialView(); } }, 500); }, 3000); });
        function showCorrectInitialView() { if (state.currentUser) { ui.authView.classList.add('hidden'); ui.appView.classList.remove('hidden'); } else { ui.authView.classList.remove('hidden'); ui.appView.classList.add('hidden'); } }
        function initializeAuth() { bindStaticEventListeners(); onAuthStateChanged(auth, user => { if (user) { state.currentUser = user; attachDataListeners(user.uid); } else { state.currentUser = null; detachDataListeners(); if(document.getElementById('auth-form')) { toggleAuthMode(true); } } state.authInitialized = true; if (ui.splashScreen.classList.contains('hidden')) { showCorrectInitialView(); } }); }
        function bindStaticEventListeners() { const authForm = document.getElementById('auth-form'); if (authForm && !authForm.dataset.listenerAttached) { authForm.addEventListener("submit", handleAuthSubmit); document.getElementById('auth-toggle-link').addEventListener("click", e => { e.preventDefault(); toggleAuthMode(); }); authForm.dataset.listenerAttached = 'true'; } if (!ui.logoutButton.dataset.listenerAttached) { ui.logoutButton.addEventListener("click", () => signOut(auth)); ui.myListButton.addEventListener('click', () => navigateTo('myList')); ui.homeButton.addEventListener('click', () => navigateTo('home')); ui.searchInput.addEventListener('input', () => renderCurrentView()); ui.categoryFilter.addEventListener('change', () => renderCurrentView()); ui.generateNewAnimeBtn.addEventListener("click", showGenerationModal); ui.logoutButton.dataset.listenerAttached = 'true'; } }
        let isRegisterMode = false;
        function toggleAuthMode(forceLogin = false) { isRegisterMode = forceLogin ? false : !isRegisterMode; const authForm = document.getElementById('auth-form'); const authTitle = document.getElementById('auth-title'); const authUsernameField = document.getElementById('username-field'); const authConfirmPasswordField = document.getElementById('confirm-password-field'); const authSubmitButton = document.getElementById('auth-submit-button'); const authToggleLink = document.getElementById('auth-toggle-link'); const authUsername = document.getElementById('auth-username'); const authConfirmPassword = document.getElementById('auth-confirm-password'); authForm.reset(); document.getElementById('auth-error').textContent = ''; if (isRegisterMode) { authTitle.textContent = "Crear Cuenta"; authSubmitButton.textContent = "Registrarse"; authToggleLink.textContent = "¿Ya tienes cuenta? Inicia sesión"; authConfirmPasswordField.classList.remove("hidden"); authUsernameField.classList.remove("hidden"); authConfirmPassword.required = true; authUsername.required = true; } else { authTitle.textContent = "Iniciar Sesión"; authSubmitButton.textContent = "Entrar"; authToggleLink.textContent = "¿No tienes cuenta? Regístrate"; authConfirmPasswordField.classList.add("hidden"); authUsernameField.classList.add("hidden"); authConfirmPassword.required = false; authUsername.required = false; } }
        async function handleAuthSubmit(e) { e.preventDefault(); const email = document.getElementById('auth-email').value; const password = document.getElementById('auth-password').value; const username = document.getElementById('auth-username').value; const authError = document.getElementById('auth-error'); authError.textContent = ''; try { if (isRegisterMode) { if (password !== document.getElementById('auth-confirm-password').value) { authError.textContent = 'Las contraseñas no coinciden.'; return; } if (!username.trim()) { authError.textContent = 'El nombre de usuario es requerido.'; return; } const userCredential = await createUserWithEmailAndPassword(auth, email, password); const user = userCredential.user; const userDocRef = doc(db, `/artifacts/${appId}/users/${user.uid}`); await setDoc(userDocRef, { uid: user.uid, email: user.email, username: username, isAdmin: user.email === ADMIN_EMAIL, saved_list: [], liked_animes: [] }); } else { await signInWithEmailAndPassword(auth, email, password); } } catch (error) { console.error("Auth Error:", error.code); switch(error.code){case"auth/email-already-in-use":authError.textContent="Este correo ya está registrado.";break;case"auth/invalid-email":authError.textContent="El formato del correo es inválido.";break;case"auth/weak-password":authError.textContent="La contraseña debe tener al menos 6 caracteres.";break;case"auth/user-not-found":case"auth/wrong-password":case"auth/invalid-credential":authError.textContent="Correo o contraseña incorrectos.";break;default:authError.textContent="Ocurrió un error."} } }

        // --- DATA & VIEW LOGIC ---
        function attachDataListeners(userId) { if (listeners.animes) return; ui.loadingIndicator.classList.remove('hidden'); listeners.animes = onSnapshot(query(animesCollection), snapshot => { state.allAnimes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); populateCategories(state.allAnimes); renderCurrentView(); ui.loadingIndicator.classList.add('hidden'); }); const userDocRef = doc(db, `/artifacts/${appId}/users/${userId}`); listeners.userData = onSnapshot(userDocRef, docSnap => { if (docSnap.exists()) { state.userData = docSnap.data(); ui.adminIndicator.classList.toggle('hidden', !state.userData.isAdmin); } else { state.userData = { saved_list: [], liked_animes: [], isAdmin: false }; } renderCurrentView(); }); }
        function detachDataListeners() { Object.values(listeners).forEach(listener => listener && listener()); listeners = { animes: null, userData: null }; state = { ...state, allAnimes: [], userData: {} }; }
        function renderCurrentView() { let animesToRender = [...state.allAnimes].sort((a, b) => (b.likes || 0) - (a.likes || 0)); if (state.isMyListView) { animesToRender = animesToRender.filter(a => state.userData.saved_list?.includes(a.id)); } applyFilters(animesToRender); }
        function applyFilters(animes) { const searchTerm = ui.searchInput.value.toLowerCase(); const selectedCategory = ui.categoryFilter.value; const filtered = animes.filter(a => (a.title.toLowerCase().includes(searchTerm)) && (selectedCategory === 'all' || a.category === selectedCategory)); renderAnimes(ui.animeGrid, filtered); }
        function navigateTo(view) { state.isMyListView = view === 'myList'; ui.myListButton.classList.toggle('text-indigo-400', state.isMyListView); ui.viewTitle.textContent = state.isMyListView ? "Mi Lista" : "Animes"; renderCurrentView(); }
        function renderAnimes(gridElement, animes) { gridElement.innerHTML = ''; animes.forEach(anime => { const card = document.createElement('div'); card.className = 'group relative rounded-lg overflow-hidden shadow-lg transform hover:-translate-y-1 transition-transform duration-300 cursor-pointer'; card.innerHTML = `<img src="${anime.coverImageUrl||"https://placehold.co/400x600/1F2937/FFFFFF?text=Anime"}" onerror="this.onerror=null;this.src='https://placehold.co/400x600/1F2937/FFFFFF?text=Error';" class="w-full h-full object-cover aspect-[2/3]"><div class="absolute inset-0 card-gradient flex flex-col justify-end p-4"><h3 class="text-lg font-bold text-white">${anime.title}</h3><p class="text-sm text-gray-300">${anime.category}</p></div>`; card.addEventListener('click', () => showDetails(anime)); gridElement.appendChild(card); }); ui.noResults.classList.toggle('hidden', animes.length > 0); }
        function populateCategories(animes) { const categories = [...new Set(animes.map(a => a.category))]; ui.categoryFilter.innerHTML = '<option value="all">Todas las categorías</option>'; categories.sort().forEach(c => ui.categoryFilter.innerHTML += `<option value="${c}">${c}</option>`); }
        
        // --- MODALS & ACTIONS ---
        async function showDetails(anime) { try { state.currentAnimeDetails = anime; const isCreator = state.currentUser.uid === anime.creatorUid; const isAdmin = state.userData.isAdmin; const creatorSnap = await getDoc(doc(db, `/artifacts/${appId}/users/${anime.creatorUid}`)); const creator = creatorSnap.exists() ? creatorSnap.data() : { username: 'Desconocido' }; ui.modalContainer.innerHTML = `<div class="fixed inset-0 w-full h-full flex items-center justify-center modal-backdrop z-50"><div class="modal-content w-full max-w-4xl p-0 rounded-2xl shadow-2xl m-4 flex flex-col"><div class="relative w-full h-64 md:h-80 rounded-t-2xl bg-cover bg-center" style="background-image: url(${anime.coverImageUrl || ''})"><div class="absolute inset-0 bg-gradient-to-t from-gray-800 via-gray-800/70 to-transparent p-6 flex flex-col justify-end"><h2 class="text-4xl font-bold">${anime.title}</h2><div class="flex items-center justify-between mt-2 flex-wrap gap-2"><div class="flex flex-col"><span class="text-sm font-semibold bg-indigo-600 px-3 py-1 rounded-full inline-block">${anime.category}</span><span class="text-xs text-gray-300 mt-1">Creado por: ${creator.username}</span></div><div class="flex items-center space-x-3"><button id="details-like-btn" class="btn-icon ${state.userData.liked_animes?.includes(anime.id) ? 'a
